<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:serial="ru.kokorin.dubmanager.component.anime.*"
         xmlns:parsley="http://www.spicefactory.org/parsley"
         xmlns:popup="ru.kokorin.component.*" xmlns:display="flash.display.*"
         creationComplete="{onCC()}">
    <fx:Declarations>
        <parsley:FastInject>
            <parsley:injectionComplete><![CDATA[
                    animeSelectPM.addEventListener(SelectEvent.SELECT, function (event:SelectEvent):void {
                        animePM.open(event.item, true);
                    });
                ]]></parsley:injectionComplete>
            <parsley:Inject property="animeSelectPM" type="{AnimeSelectPM}"/>
        </parsley:FastInject>

        <serial:AnimePM id="animePM"
                        save="{model.saveAnime(event.item, event.original)}"/>

        <parsley:PopUp open="{animePM.isOpen}" modal="true" reuse="true">
            <parsley:behaviors>
                <fx:Array>
                    <popup:KeepMaxSizeBehavior/>
                </fx:Array>
            </parsley:behaviors>
            <serial:AnimeView model="{animePM}"/>
        </parsley:PopUp>

        <parsley:PopUp open="{animeSelectPM.isOpen}" modal="true" reuse="true">
            <parsley:behaviors>
                <fx:Array>
                    <popup:KeepMaxSizeBehavior/>
                </fx:Array>
            </parsley:behaviors>
            <serial:AnimeSelectView model="{animeSelectPM}"/>
        </parsley:PopUp>

        <s:DateTimeFormatter id="dtFormatter" dateStyle="long" timeStyle="none"/>

        <display:NativeMenu id="rightClickMenu">
            <display:items>
                <display:NativeMenuItem label="{resourceManager.getString('component', 'edit')}"
                                        select="{animePM.open(dg.selectedItem)}"/>
                <display:NativeMenuItem label="{resourceManager.getString('component', 'anime.videoURL')}"
                                        enabled="{isHttpUrl((dg.selectedItem as Anime).videoURL)}"
                                        select="{openVideo(dg.selectedItem as Anime)}"/>
                <display:NativeMenuItem label="{resourceManager.getString('component', 'anime.subtitleURL')}"
                                        enabled="{isHttpUrl((dg.selectedItem as Anime).subtitleURL)}"
                                        select="{openSubtitles(dg.selectedItem as Anime)}"/>
                <display:NativeMenuItem label="{resourceManager.getString('component', 'remove')}"
                                        select="{askRemove(dg.selectedItem as Anime)}"/>
            </display:items>
        </display:NativeMenu>
    </fx:Declarations>

    <fx:Script><![CDATA[
        import mx.events.CloseEvent;

        import ru.kokorin.component.SelectEvent;

        import ru.kokorin.dubmanager.component.anime.AnimeSelectPM;

        import ru.kokorin.dubmanager.domain.Anime;
        import ru.kokorin.dubmanager.domain.AnimeStatus;
        import ru.kokorin.dubmanager.domain.Episode;
        import ru.kokorin.dubmanager.domain.EpisodeStatus;
        import ru.kokorin.util.LabelUtil;
        import ru.kokorin.util.RendererUtil;

        import spark.components.Alert;

        [Bindable]
        public var animeSelectPM:AnimeSelectPM;

        private var _model:WorkspacePM;

        private function onCC():void {
            setInterval(dg.invalidateDisplayList, 15 * 60 * 1000);
        }

        [Bindable]
        public function get model():WorkspacePM {
            return _model;
        }

        public function set model(value:WorkspacePM):void {
            _model = value;
        }


        private function askRemove(anime:Anime):void {
            const name:String = LabelUtil.getTitle(anime.titles);
            const title:String = resourceManager.getString('component', 'anime.removeTitle');
            const question:String = resourceManager.getString('component', 'anime.removeQuestion', [name]);
            Alert.show(question, title, Alert.YES | Alert.NO, null, function (event:CloseEvent):void {
                if (event.detail == Alert.YES) {
                    model.removeAnime(anime);
                }
            });
        }

        private function itemRightClick(event:MouseEvent, item:Object):void {
            dg.selectedItem = item;
            rightClickMenu.display(stage, event.stageX, event.stageY);
        }

        private function itemDoubleClick(event:MouseEvent, item:Object):void {
            animePM.open(item);
        }

        private static function completeEpisodeCountLabelFunction(aniDub:Anime, column:Object = null):String {
            if (aniDub && aniDub.status == AnimeStatus.IN_PROCESS) {
                var current:Number = 0;
                for each(var episode:Episode in aniDub.episodes) {
                    var epNumber:Number = parseInt(episode.number);
                    //Looking for latest completed episode
                    if (episode.status == EpisodeStatus.COMPLETE && current < epNumber) {
                        current = epNumber;
                    }
                }
                return current + "/" + aniDub.episodeCount;
            }
            return "";
        }

        private static function nextDateLabelFunction(aniDub:Anime, column:GridColumn):String {
            const date:Date = getNextDate(aniDub);
            if (date) {
                if (column.formatter) {
                    return column.formatter.format(date);
                }
                return String(date);
            }
            return "";
        }

        private static function nextDateCompare(aniDub1:Anime, aniDub2:Anime, column:GridColumn):int {
            const date1:Date = getNextDate(aniDub1);
            const date2:Date = getNextDate(aniDub2);
            const time1:Number = date1 ? date1.time : 0;
            const time2:Number = date2 ? date2.time : 0;
            if (time1 < time2) {
                return -1;
            }
            if (time1 == time2) {
                return 0;
            }
            return 1;
        }

        private static function getNextDate(anime:Anime):Date {
            var result:Episode = null;
            if (anime && anime.status == AnimeStatus.IN_PROCESS) {
                for each(var epiDub:Episode in anime.episodes) {
                    //Looking for newest not_started episode
                    if (epiDub.status == EpisodeStatus.NOT_STARTED && (!result || result.number > epiDub.number)) {
                        result = epiDub;
                    }
                }
            }
            if (result) {
                return result.airDate;
            }
            return null;
        }

        private static function isHttpUrl(value:String):Boolean {
            return value != null && value.indexOf("http") == 0;
        }

        private static function openVideo(serial:Anime):void {
            if (serial && serial.videoURL) {
                var urlReq:URLRequest = new URLRequest(serial.videoURL);
                navigateToURL(urlReq, "_blank");
            }
        }

        private static function openSubtitles(serial:Anime):void {
            if (serial && serial.subtitleURL) {
                var urlReq:URLRequest = new URLRequest(serial.subtitleURL);
                navigateToURL(urlReq, "_blank");
            }
        }
        ]]>
    </fx:Script>

    <s:layout>
        <s:VerticalLayout paddingLeft="5" paddingBottom="5" paddingRight="5" paddingTop="5"/>
    </s:layout>

    <s:HGroup width="100%" verticalAlign="middle" paddingLeft="5" paddingRight="5" paddingTop="2" paddingBottom="2">
        <s:Label width="100%" styleName="caption"
                 text="{resourceManager.getString('component', 'animeList')}"/>
        <s:Button width="100" label="{resourceManager.getString('component', 'add')}"
                  click="{animeSelectPM.open()}"/>
        <s:Button width="100" label="{resourceManager.getString('component', 'edit')}"
                  click="{animePM.open(dg.selectedItem)}" enabled="{dg.selectedItem}"/>
        <s:Button width="100" label="{resourceManager.getString('component', 'remove')}"
                  click="{askRemove(dg.selectedItem as Anime)}" enabled="{dg.selectedItem}"/>
    </s:HGroup>

    <s:DataGrid id="dg" width="100%" height="100%"
                dataProvider="{model.animeList}"
                itemRenderer="ru.kokorin.dubmanager.renderer.AnimeGridRenderer"
                doubleClickEnabled="true" doubleClickMode="row"
                doubleClick="{RendererUtil.onRenderer(event, itemDoubleClick)}"
                rightMouseDown="{RendererUtil.onRenderer(event, itemRightClick)}"
                resizableColumns="true">
        <s:columns>
            <s:ArrayList>
                <s:GridColumn dataField="titles" percentWidth="40" showDataTips="{true}"
                              headerText="{resourceManager.getString('component', 'anime.name')}"
                              labelFunction="{LabelUtil.getTitle}"/>
                <s:GridColumn dataField="type" width="80"
                              headerText="{resourceManager.getString('component', 'anime.type')}"
                              labelFunction="{LabelUtil.getEnumLabel}"/>
                <s:GridColumn dataField="status" width="100"
                              headerText="{resourceManager.getString('component', 'anime.status')}"
                              labelFunction="{LabelUtil.getEnumLabel}"/>
                <s:GridColumn width="100" sortable="false"
                              headerText="{resourceManager.getString('component', 'anime.completeEpisodeCount')}"
                              labelFunction="{completeEpisodeCountLabelFunction}"/>
                <s:GridColumn width="120" formatter="{dtFormatter}"
                              headerText="{resourceManager.getString('component', 'anime.nextEpisodeDate')}"
                              labelFunction="{nextDateLabelFunction}"
                              sortCompareFunction="{nextDateCompare}"/>
                <s:GridColumn dataField="comment" percentWidth="60" showDataTips="true"
                              headerText="{resourceManager.getString('component', 'anime.comment')}"/>
            </s:ArrayList>
        </s:columns>
    </s:DataGrid>

</s:Group>
