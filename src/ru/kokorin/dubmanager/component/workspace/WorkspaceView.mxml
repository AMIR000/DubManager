<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:serial="ru.kokorin.dubmanager.component.serial.*"
         xmlns:parsley="http://www.spicefactory.org/parsley"
         xmlns:popup="ru.kokorin.component.*">
    <fx:Declarations>
        <serial:SerialPM id="serialPM"
                         save="{model.saveSerial(event.item, event.original)}"/>

        <parsley:PopUp open="{serialPM.isOpen}" modal="true" reuse="false">
            <parsley:behaviors>
                <fx:Array>
                    <popup:KeepMaxSizeBehavior/>
                </fx:Array>
            </parsley:behaviors>
            <serial:SerialView model="{serialPM}"/>
        </parsley:PopUp>
    </fx:Declarations>
    <fx:Script><![CDATA[
        import mx.events.CloseEvent;

        import ru.kokorin.dubmanager.domain.Serial;

        import spark.components.Alert;

        [Bindable]
        public var model:WorkspacePM;

        private function openVideo(serial:Serial):void {
            if (serial && serial.videoURL) {
                var urlReq:URLRequest = new URLRequest(serial.videoURL);
                navigateToURL(urlReq, "_blank");
            }
        }

        private function openSubtitles(serial:Serial):void {
            if (serial && serial.subtitleURL) {
                var urlReq:URLRequest = new URLRequest(serial.subtitleURL);
                navigateToURL(urlReq, "_blank");
            }
        }

        private function askRemove(serial:Serial):void {
            Alert.show("Удалить?", "DubManager", Alert.YES | Alert.NO, null, function (event:CloseEvent):void {
                if (event.detail & Alert.YES) {
                    model.removeSerial(serial);
                }
            });
        }

        /*        private function progressLabelFunction(item:Object, column:GridColumn):String {
         var i:DubItem = item as DubItem;
         if (!i || isNaN(i.currentSubItem)) {
         return "";
         }
         return i.currentSubItem + "/" + i.totalSubItems;
         }

         private function compareDateFunction(obj1:Object, obj2:Object, column:GridColumn):int {
         var i1:DubItem = obj1 as DubItem;
         var i2:DubItem = obj2 as DubItem;
         var d1:Date = i1 ? i1.nextDate : null;
         var d2:Date = i2 ? i2.nextDate : null;
         var time1:Number = d1 ? d1.time : 0;
         var time2:Number = d2 ? d2.time : 0;
         if (time1 < time2) {
         return -1;
         }
         if (time1 == time2) {
         return 0;
         }
         return 1;
         }

         private function itemRendererFunction(item:Object, column:GridColumn):IFactory {
         var di:DubItem = item as DubItem;
         var today:Date = new Date();
         today.hours = 23;
         today.minutes = 59;
         today.seconds = 59;
         var overdate:Date = new Date(today);
         overdate.date -= 7;

         if (di && di.nextDate && di.nextDate.time < overdate.time) {
         return overdueRenderer;
         }
         if (di && di.nextDate && di.nextDate.time < today.time) {
         return warningRenderer;
         }
         return defaultRenderer;
         }*/
        ]]>
    </fx:Script>

    <s:layout>
        <s:VerticalLayout/>
    </s:layout>

    <s:HGroup width="100%" verticalAlign="middle" paddingLeft="5" paddingRight="5">
        <s:Label width="100%" text="Список аниме"/>
        <s:Button width="100" label="Добавить" click="{serialPM.open()}"/>
        <s:Button width="100" label="Открыть" click="{serialPM.open(dg.selectedItem)}" enabled="{dg.selectedItem}"/>
        <s:Button width="100" label="Видео" click="{openVideo(dg.selectedItem as Serial)}" enabled="{dg.selectedItem}"/>
        <s:Button width="100" label="Субтитры" click="{openSubtitles(dg.selectedItem as Serial)}" enabled="{dg.selectedItem}"/>
        <s:Button width="100" label="Удалить" click="{askRemove(dg.selectedItem as Serial)}" enabled="{dg.selectedItem}"/>
    </s:HGroup>
    <s:DataGrid id="dg" width="100%" height="100%"
                dataProvider="{model.serials}" resizableColumns="true">
        <s:columns>
            <s:ArrayList>
                <s:GridColumn dataField="name" headerText="Название"/>
                <s:GridColumn dataField="type" width="100" headerText="Тип"/>
                <s:GridColumn dataField="status" width="150" headerText="Статус"/>
                <!--<s:GridColumn labelFunction="{progressLabelFunction}" width="100" headerText="Серия" sortable="false"/>
                <s:GridColumn dataField="nextDate" width="170" headerText="Дата"
                              itemRendererFunction="{itemRendererFunction}"
                              formatter="{dateFromatter}"
                              sortCompareFunction="{compareDateFunction}"/>-->
                <s:GridColumn dataField="comment" width="150" headerText="Комментарий" showDataTips="true"/>
            </s:ArrayList>
        </s:columns>
    </s:DataGrid>

</s:Group>
