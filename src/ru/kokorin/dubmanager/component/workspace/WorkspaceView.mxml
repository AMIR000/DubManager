<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:serial="ru.kokorin.dubmanager.component.serial.*"
         xmlns:parsley="http://www.spicefactory.org/parsley"
         xmlns:popup="ru.kokorin.component.*"
         creationComplete="{onCC()}">
    <fx:Declarations>
        <serial:SerialPM id="serialPM"
                         save="{model.saveSerial(event.item, event.original)}"/>

        <parsley:PopUp open="{serialPM.isOpen}" modal="true" reuse="true">
            <parsley:behaviors>
                <fx:Array>
                    <popup:KeepMaxSizeBehavior/>
                </fx:Array>
            </parsley:behaviors>
            <serial:SerialView model="{serialPM}"/>
        </parsley:PopUp>
    </fx:Declarations>
    <fx:Script><![CDATA[
        import mx.events.CloseEvent;

        import ru.kokorin.dubmanager.domain.Episode;
        import ru.kokorin.dubmanager.domain.EpisodeStatus;
        import ru.kokorin.dubmanager.domain.Serial;
        import ru.kokorin.dubmanager.domain.SerialStatus;
        import ru.kokorin.dubmanager.domain.SerialType;
        import ru.kokorin.util.LabelUtil;

        import spark.components.Alert;

        [Bindable]
        public var model:WorkspacePM;

        private function openVideo(serial:Serial):void {
            if (serial && serial.videoURL) {
                var urlReq:URLRequest = new URLRequest(serial.videoURL);
                navigateToURL(urlReq, "_blank");
            }
        }

        private function openSubtitles(serial:Serial):void {
            if (serial && serial.subtitleURL) {
                var urlReq:URLRequest = new URLRequest(serial.subtitleURL);
                navigateToURL(urlReq, "_blank");
            }
        }

        private function askRemove(serial:Serial):void {
            const title:String = resourceManager.getString('component', 'serial.removeTitle');
            const question:String = resourceManager.getString('component', 'serial.removeQuestion', [serial.name]);
            Alert.show(question, title, Alert.YES | Alert.NO, null, function (event:CloseEvent):void {
                if (event.detail == Alert.YES) {
                    model.removeSerial(serial);
                }
            });
        }

        private function onCC():void {
            setInterval(dg.invalidateDisplayList, 15*60*1000);
        }

        private function progressLabelFunction(serial:Serial, column:GridColumn):String {
            if (serial.status == SerialStatus.IN_PROCESS) {
                var current:Number = 0;
                for each(var episode:Episode in serial.episodes) {
                    //Looking for latest completed episode
                    if (episode.status == EpisodeStatus.COMPLETE && current < episode.number) {
                        current = episode.number;
                    }
                }
                return current + "/" + serial.episodesCount;
            }
            return "";
        }
        ]]>
    </fx:Script>

    <s:layout>
        <s:VerticalLayout paddingLeft="5" paddingBottom="5" paddingRight="5" paddingTop="5"/>
    </s:layout>

    <s:HGroup width="100%" verticalAlign="middle" paddingLeft="5" paddingRight="5" paddingTop="2" paddingBottom="2">
        <s:Label width="100%" styleName="caption"
                 text="{resourceManager.getString('component', 'serials')}"/>
        <s:Button width="100" label="{resourceManager.getString('component', 'add')}"
                  click="{serialPM.open()}"/>
        <s:Button width="100" label="{resourceManager.getString('component', 'edit')}"
                  click="{serialPM.open(dg.selectedItem)}" enabled="{dg.selectedItem}"/>
        <s:Button width="100" label="Видео"
                  click="{openVideo(dg.selectedItem as Serial)}" enabled="{dg.selectedItem}"/>
        <s:Button width="100" label="Субтитры"
                  click="{openSubtitles(dg.selectedItem as Serial)}"
                  enabled="{dg.selectedItem}"/>
        <s:Button width="100" label="{resourceManager.getString('component', 'remove')}"
                  click="{askRemove(dg.selectedItem as Serial)}" enabled="{dg.selectedItem}"/>
    </s:HGroup>
    <!--TODO double click, context menu-->
    <s:DataGrid id="dg" width="100%" height="100%"
                dataProvider="{model.serials}"
                itemRenderer="ru.kokorin.dubmanager.renderer.SerialGridRenderer"
                resizableColumns="true">
        <s:columns>
            <s:ArrayList>
                <s:GridColumn dataField="name" percentWidth="40" showDataTips="{true}"
                              headerText="{resourceManager.getString('component', 'serial.name')}"/>
                <s:GridColumn dataField="type" width="100"
                              headerText="{resourceManager.getString('component', 'serial.type')}"
                              labelFunction="{LabelUtil.getEnumLabelFunction(SerialType)}"/>
                <s:GridColumn dataField="status" width="150"
                              headerText="{resourceManager.getString('component', 'serial.status')}"
                              labelFunction="{LabelUtil.getEnumLabelFunction(SerialStatus)}"/>
                <s:GridColumn width="100" sortable="false"
                              headerText="{resourceManager.getString('component', 'serial.episode')}"
                              labelFunction="{progressLabelFunction}"/>
                <!--<s:GridColumn dataField="nextDate" width="170" headerText="Дата"
                              itemRendererFunction="{itemRendererFunction}"
                              formatter="{dateFromatter}"
                              sortCompareFunction="{compareDateFunction}"/>-->
                <s:GridColumn dataField="comment" percentWidth="60" showDataTips="true"
                              headerText="{resourceManager.getString('component', 'serial.comment')}"/>
            </s:ArrayList>
        </s:columns>
    </s:DataGrid>

</s:Group>
