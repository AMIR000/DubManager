<?xml version="1.0" encoding="utf-8"?>
<component:EditView xmlns:fx="http://ns.adobe.com/mxml/2009"
                    xmlns:s="library://ns.adobe.com/flex/spark"
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    xmlns:component="ru.kokorin.component.*"
                    xmlns:episode="ru.kokorin.dubmanager.component.episode.*"
                    xmlns:parsley="http://www.spicefactory.org/parsley" xmlns:display="flash.display.*">

    <component:title>{resourceManager.getString('component', 'anime')}{changeTracker.changed?' *':''}</component:title>

    <fx:Declarations>
        <episode:EpisodePM id="episodePM" save="{model.saveEpisode(event.item, event.original)}"/>

        <parsley:PopUp open="{episodePM.isOpen}" modal="true" reuse="false">
            <parsley:behaviors>
                <fx:Array>
                    <component:KeepMaxSizeBehavior/>
                </fx:Array>
            </parsley:behaviors>
            <episode:EpisodeView model="{episodePM}"/>
        </parsley:PopUp>

        <!--TODO move dateTimePattern to locale-specific property-files-->
        <s:DateTimeFormatter id="dtFormatter" dateTimePattern="EE, dd MMM yyyy"/>

        <display:NativeMenu id="rightClickMenu">
            <display:items>
                <display:NativeMenuItem label="{LabelUtil.getEnumLabel(EpisodeStatus.COMPLETE)}"
                                        enabled="{canSwitchTo(EpisodeStatus.COMPLETE, dg.selectedItems)}"
                                        select="{model.setStatus(EpisodeStatus.COMPLETE, dg.selectedItems)}"/>
                <display:NativeMenuItem label="{LabelUtil.getEnumLabel(EpisodeStatus.NOT_STARTED)}"
                                        enabled="{canSwitchTo(EpisodeStatus.NOT_STARTED, dg.selectedItems)}"
                                        select="{model.setStatus(EpisodeStatus.NOT_STARTED, dg.selectedItems)}"/>
            </display:items>
        </display:NativeMenu>
    </fx:Declarations>
    <fx:Script>
		<![CDATA[
        import mx.collections.ArrayList;
        import mx.collections.SortFieldCompareTypes;

        import ru.kokorin.dubmanager.domain.AnimeStatus;
        import ru.kokorin.dubmanager.domain.Episode;
        import ru.kokorin.dubmanager.domain.EpisodeStatus;
        import ru.kokorin.util.LabelUtil;
        import ru.kokorin.util.RendererUtil;

        [Bindable]
        public function get model():AnimePM {
            return getModel() as AnimePM;
        }

        public function set model(value:AnimePM):void {
            setModel(value);
        }


        override protected function clear():void {
            super.clear();
            viewstack.selectedIndex = 0;
        }


        private function createEpisode():void {
            var lastEpisode:Episode;
            var lastNumber:Number = Number.MAX_VALUE;
            for each (var episode:Episode in model.anime.episodes) {
                var episodeNumber:Number = parseInt(episode.number);
                if (isNaN(episodeNumber)) {
                    continue;
                }
                if (!lastEpisode || lastNumber < episodeNumber) {
                    lastEpisode = episode;
                    lastNumber = episodeNumber;
                }
            }

            const newEpisode:Episode = new Episode();
            newEpisode.status = EpisodeStatus.NOT_STARTED;

            if (lastEpisode) {
                newEpisode.number = String(lastNumber + 1);
                newEpisode.airDate = new Date(lastEpisode.airDate);
                newEpisode.airDate.date += 7;
            } else {
                newEpisode.number = "0";
                newEpisode.airDate = new Date();
            }

            episodePM.open(newEpisode, true);
        }

        private function itemDoubleClick(event:MouseEvent, item:Object):void {
            episodePM.open(item);
        }

        private function itemRightClick(event:MouseEvent, item:Object):void {
            if (!dg.selectedItems || dg.selectedItems.indexOf(item) == -1) {
                dg.selectedItem = item;
            }
            rightClickMenu.display(stage, event.stageX, event.stageY);
        }

        private static function canSwitchTo(status:EpisodeStatus, episodes:Vector.<Object>):Boolean {
            var result:Boolean = false;

            for each (var episode:Episode in episodes) {
                if (episode.status != status) {
                    result = true;
                    break;
                }
            }

            return result;
        }
        ]]>
	</fx:Script>

    <component:layout>
        <s:VerticalLayout paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"
                          gap="0"/>
    </component:layout>

    <s:TabBar dataProvider="{viewstack}" width="300"/>
    <s:BorderContainer width="100%" height="100%">
        <mx:ViewStack id="viewstack" width="100%" height="100%">
            <s:NavigatorContent width="100%" height="100%"
                                label="{resourceManager.getString('component', 'anime.details')}">
                <s:Scroller width="100%" height="100%">
                    <s:Group width="100%">
                        <s:Form width="100%">
                            <s:layout>
                                <s:FormLayout gap="-16" paddingLeft="-15" paddingRight="-15" paddingTop="-5"
                                              paddingBottom="-5"/>
                            </s:layout>
                            <s:FormItem width="100%" label="{resourceManager.getString('component', 'anime.title')}">
                                <s:TextInput width="100%" editable="false"
                                             text="{LabelUtil.getTitle(model.anime.titles)}"/>
                            </s:FormItem>
                            <s:FormItem width="100%" label="{resourceManager.getString('component', 'anime.type')}">
                                <s:TextInput width="100%" text="{LabelUtil.getEnumLabel(model.anime.type)}"
                                             editable="false"/>
                            </s:FormItem>
                            <s:FormItem width="100%" label="{resourceManager.getString('component', 'anime.status')}">
                                <s:DropDownList id="statusList" width="100%"
                                                labelFunction="{LabelUtil.getEnumLabel}"
                                                dataProvider="{new ArrayList(AnimeStatus.statuses)}"
                                                selectedItem="{model.anime.status}"
                                                change="{model.anime.status = statusList.selectedItem as AnimeStatus}"/>
                            </s:FormItem>
                            <s:FormItem width="100%"
                                        label="{resourceManager.getString('component', 'anime.episodesCount')}">
                                <s:TextInput id="episodeCountInput" width="100" restrict="0-9"
                                             text="{model.anime.episodeCount}" editable="{isNaN(model.anime.id)}"
                                             change="{model.anime.episodeCount = parseInt(episodeCountInput.text)}"/>
                            </s:FormItem>
                            <s:FormItem width="100%" label="{resourceManager.getString('component', 'anime.videoURL')}">
                                <s:TextInput width="100%" text="@{model.anime.videoURL}"/>
                            </s:FormItem>
                            <s:FormItem width="100%"
                                        label="{resourceManager.getString('component', 'anime.subtitleURL')}">
                                <s:TextInput width="100%" text="@{model.anime.subtitleURL}"/>
                            </s:FormItem>
                            <s:FormItem width="100%" label="{resourceManager.getString('component', 'anime.timingBy')}">
                                <s:TextInput width="100%" text="@{model.anime.timingBy}"/>
                            </s:FormItem>
                            <s:FormItem width="100%" label="{resourceManager.getString('component', 'anime.soundBy')}">
                                <s:TextInput width="100%" text="@{model.anime.soundBy}"/>
                            </s:FormItem>
                            <s:FormItem width="100%"
                                        label="{resourceManager.getString('component', 'anime.integrationBy')}">
                                <s:TextInput width="100%" text="@{model.anime.integrationBy}"/>
                            </s:FormItem>
                            <s:FormItem width="100%" label="{resourceManager.getString('component', 'anime.comment')}">
                                <s:TextArea width="100%" text="@{model.anime.comment}" heightInLines="10"/>
                            </s:FormItem>
                        </s:Form>
                    </s:Group>
                </s:Scroller>
            </s:NavigatorContent>

            <s:NavigatorContent width="100%" height="100%"
                                label="{resourceManager.getString('component', 'anime.episodes')}">
                <s:VGroup width="100%" height="100%"
                          paddingLeft="5" paddingRight="5" paddingBottom="5" paddingTop="5">
                    <s:HGroup width="100%" verticalAlign="middle" horizontalAlign="right">
                        <s:Button width="100" label="{resourceManager.getString('component', 'add')}"
                                  click="{createEpisode()}"/>
                        <s:Button width="100" label="{resourceManager.getString('component', 'edit')}"
                                  click="{episodePM.open(dg.selectedItem)}" enabled="{dg.selectedItem}"/>
                        <s:Button width="100" label="{resourceManager.getString('component', 'remove')}"
                                  click="{model.removeEpisode(dg.selectedItem)}"
                                  enabled="{dg.selectedItem &amp;&amp; isNaN((dg.selectedItem as Episode).id)}"/>
                    </s:HGroup>
                    <s:DataGrid id="dg" width="100%" height="100%" dataProvider="{model.anime.episodes}"
                                doubleClickEnabled="true" doubleClickMode="row"
                                doubleClick="{RendererUtil.onRenderer(event, itemDoubleClick)}"
                                rightClick="{RendererUtil.onRenderer(event, itemRightClick)}"
                                selectionMode="multipleRows"
                                multiColumnSortingEnabled="true">
                        <s:columns>
                            <s:ArrayList>
                                <s:GridColumn dataField="number"
                                              headerText="{resourceManager.getString('component', 'episode.number')}"
                                              sortCompareType="{SortFieldCompareTypes.NUMERIC}"/>
                                <s:GridColumn dataField="titles" visible="{!isNaN(model.anime.id)}"
                                              labelFunction="{LabelUtil.getTitle}" dataTipFunction="{LabelUtil.getTitle}"
                                              headerText="{resourceManager.getString('component', 'episode.title')}"
                                              sortCompareFunction="{LabelUtil.compareByTitle}"/>
                                <s:GridColumn dataField="status"
                                              labelFunction="{LabelUtil.getEnumLabel}"
                                              headerText="{resourceManager.getString('component', 'episode.status')}"/>
                                <s:GridColumn dataField="airDate" formatter="{dtFormatter}"
                                              headerText="{resourceManager.getString('component', 'episode.date')}"/>
                            </s:ArrayList>
                        </s:columns>
                    </s:DataGrid>
                </s:VGroup>
            </s:NavigatorContent>
        </mx:ViewStack>
    </s:BorderContainer>
</component:EditView>
